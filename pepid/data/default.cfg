# Basic workflow:
# - simultaneous processing (db, query)
# - simultaneous postprocessing (db, query)
# - search
# - search postprocessing
# - output (tsv, then report, then rescoring, then final report)

# Format for functions is: importable.module:function_name
# See below for examples

[performance]
python = python # path to python/pypy/etc. executable

[logging]
level = info # Valid values are debug, info, warning, error, fatal.

[data]
output = pepid_results.tsv # where to save the results
queries = queries.mgf # input query mgf
database = ../human.fasta # input database
workdir = false # this should be the path to the generated work files' directory if using, else 'false'
tmpdir = /tmp/ # where to put temporary files

[processing.query]
enabled = true
workers = 32
postprocessing function = my_script:predict_length
postprocessing workers = 32
batch size = 1180 # batch size for parallel processing
max peaks = 9999 # Discard spectra with more than this many peaks
min peaks = 0 # Discard spectra with fewer than this many peaks
min mass = 250
max mass = 6000
max charge = 4 # Max charge for spectra
min charge = 2 # Min charge for spectra

[processing.db]
enabled = true
workers = 32
postprocessing workers = 32
batch size = 1180
variable modifications = M+15.994915 # Comma-separated mod list (default: M(ox))
fixed modifications = C+57.0215 # Comma-separated mod list (default: CAM)
nterm cleavage = 1.007825
cterm cleavage = 17.002735
max variable modifications = 3
# Digestion rule as a regular expression
#digestion = [RK](?!P) # trypsin: "R or K except when followed by P"
digestion = ([RK](?!P))|((?<=W)K(?=P))|((?<=M)R(?=P)) # Trypsin: expasy rule
max missed cleavages = 2
# required digested peptide properties for inclusion below
min length = 7
max length = 40
min mass = 250
max mass = 6000
max charge = 4 # Max charge to generate candidates
spectrum function = db:theoretical_spectrum # function to use to generate spectra for candidates
rt function = db:pred_rt # function to use for retention time prediction
generate decoys = true
decoy prefix = DECOY_
decoy method = reverse # possible choices are reverse or shuffle

[postprocessing]
enabled = true

[scoring]
enabled = true
workers = 64
batch size = 1180
peak matching tolerance = 10 # mass error tolerance for matching peaks
matching unit = ppm # ppm or abs (any non-ppm value assumed to be abs)
candidate filtering tolerance = -100,100 # left and right side tolerance for candidate filtering previous to search
filtering unit = ppm
function = search:identipy_rnhs

[output]
enabled = true
max retained candidates = 100
batch size = 1180

[report]
enabled = true
max scores = 1 # How many scores to retain per spectrum for reporting
type = fdr # options are: fdr (target-decoy fdr) or fdp
out = report # output directory for report artifacts

[rescoring]
enabled = false
function = pepid_percolator:rescore
suffix = _final # Suffix to use to generate the rescored results filename. Cannot be empty.

[rescoring report]
enabled = false
type = fdr
